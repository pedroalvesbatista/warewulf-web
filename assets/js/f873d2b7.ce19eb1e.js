"use strict";(self.webpackChunkwarewulf=self.webpackChunkwarewulf||[]).push([[3533],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return w}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(n),w=r,f=p["".concat(s,".").concat(w)]||p[w]||c[w]||a;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function w(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<a;d++)l[d]=n[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},355:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],i={id:"development-environment-vbox",title:"Development Environment (VirtualBox)"},s=void 0,d={unversionedId:"contributing/development-environment-vbox",id:"contributing/development-environment-vbox",isDocsHomePage:!1,title:"Development Environment (VirtualBox)",description:"I have VirtualBox running on my desktop.",source:"@site/docs/contributing/development-environment-vbox.md",sourceDirName:"contributing",slug:"/contributing/development-environment-vbox",permalink:"/docs/contributing/development-environment-vbox",editUrl:"https://github.com/hpcng/warewulf-web/edit/main/docs/contributing/development-environment-vbox.md",tags:[],version:"current",frontMatter:{id:"development-environment-vbox",title:"Development Environment (VirtualBox)"},sidebar:"someSidebar",previous:{title:"Development Environment (KVM)",permalink:"/docs/contributing/development-environment-kvm"},next:{title:"Glossary",permalink:"/docs/appendix/glossary"}},u=[],c={toc:u};function p(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"I have VirtualBox running on my desktop."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create a NAT Network (a private vlan) to be used for the Warewlf Server and compute nodes inside the VirtualBox. Make sure to turnoff DHCP service within this NAT Network.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# On the host with VirtualBox execute below. In my example using 10.0.8.0/24 as the private vlan for my experiment with Warewulf\n\nVBoxManage natnetwork add --netname wwnatnetwork --network "10.0.8.0/24" --enable --dhcp off\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Create a Centos 7 development Virtual machine (wwdev) to be used as the Warewulf Server. Enable two Network adapters one with a standard NAT and SSH port mapping such that you can access this VM from the host machine. Assign the second network adapter to the NAT Network created in step #1. Assign sufficient memory (e.g: 4GB) to the VM. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Download a Centos7 or SL7 ISO and mount it to the optical drive to boot and install OS for the wwdev VM.\n# Attach Network adapter #1 of the wwdev VM to the standard NAT via VM Settings -> Network option. \n# By default VirtualBox puts the Network Adapter into 10.0.2.0/24 network and assigns 10.0.2.15 IP address.\n\n# Also add a rule to the port forwarding table under the standard NAT configuration to allow SSH \n# from localhost (127.0.0.1) some high port e.g 2222 to the guest IP 10.0.2.15 port 22 such that      \n# you can SSH from your host/desktop to the wwdev VM. \n\n# Next attach the second Network adapter #2 to the NAT Network and you should be able to choose \n# the 'wwnatnetwork' created above in step #1 from the drop down list.\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Build and install warewulf on wwdev")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Login to wwdev VM and install @development group and go language\n\nssh localhost -p 2222 #(should prompt for a user account password on wwdev VM)\n\n# Disable selinux by modifying /etc/sysconfig/selinux\nvi /etc/sysconfig/selinux\n\n    SELINUX=disabled\n\n# Disable firewall\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# Centos prerequisites\nsudo yum -y install tftp-server tftp\nsudo yum -y install dhcp\nsudo yum -y install ipmitool\nsudo yum install http://repo.ctrliq.com/packages/rhel7/ctrl-release.rpm\nsudo yum install singularityplus\nsudo yum install gpgme-devel\nsudo yum install libassuan.x86_64 libassuan-devel.x86_64\n\n# Upgrade git to v2+\nsudo yum install https://packages.endpoint.com/rhel/7/os/x86_64/endpoint-repo-1.7-1.x86_64.rpm\nsudo yum install git\nsudo yum install golang\nsudo yum install nfs-utils\n\n# Install Warewulf and dependencies\ngit clone https://github.com/hpcng/warewulf.git\ncd warewulf\n\nmake all\nsudo make install\n\n# Static assign an IP to adapter #2 which is in the wwnatnetwork.\n$ Edit the file /etc/sysconfig/networking-scripts/ifcfg-enp0s9 # adapter name at the end might be different for you\n# Add lines like to below to assign an ip in 10.0.8.0/24 wwnatnetwork, I choose 10.0.8.4\nBOOTPROTO=static\nONBOOT=yes\nNAME=enp0s9\nDEVICE=enp0s9\nIPADDR=10.0.8.4\nNETMASK=255.255.255.0\nGATEWAY=10.0.8.1\n# Bring the enp0s9 interface online and verify ip assignment\n\n# Configure the Warewulf controller\n$ Edit the file /etc/warewulf/warewulf.conf and ensure that you've set the approprite configuration parameters. \n# My conf file looks like below:\n    ipaddr: 10.0.8.4\n    netmask: 255.255.255.0\n    warewulf:\n      port: 9873\n      secure: true\n      update interval: 60\n    dhcp:\n      enabled: true\n      range start: 10.0.8.150\n      range end: 10.0.8.200\n      template: default\n      systemd name: dhcpd\n    tftp:\n      enabled: true\n      tftproot: /var/lib/tftpboot\n      systemd name: tftp\n    nfs:\n      systemd name: nfs-server\n      exports:\n      - /home\n      - /var/warewulf\n\n# Configure system service automatically\nsudo wwctl configure dhcp --persist # Create the default dhcpd.conf file and start/enable service\nsudo wwctl configure tftp --persist # Install the base tftp/PXE boot files and start/enable service\nsudo wwctl configure nfs  --persist # Configure the exports and create an fstab in the default system overlay\nsudo wwctl configure ssh  --persist # Build the basic ssh keys to be included by the default system overlay\n\n# Pull and build the VNFS container and kernel\nsudo wwctl container import docker://warewulf/centos-7 centos-7 --setdefault\nsudo wwctl kernel import build $(uname -r) --setdefault\n\n# Set up the default node profile\nsudo wwctl profile set default -K $(uname -r) -C centos-7\nsudo wwctl profile set default --netdev eth0 -M 255.255.255.0 -G 10.0.8.4\nsudo wwctl profile list\n\n# Add a node and build node specific overlays\n# IP address of my nodes start from 150 as set in the warewulf.conf file above\nsudo wwctl node add n0000.cluster --netdev eth0 -I 10.0.8.150 --discoverable\nsudo wwctl node list -a n0000\n\n# Review Warewulf overlays\nsudo wwctl overlay list -l\nsudo wwctl overlay list -ls\nsudo wwctl overlay edit default /etc/hello_world.ww\nsudo wwctl overlay build -a\n\n# Start the Warewulf daemon\nsudo wwctl ready\nsudo wwctl server start\nsudo wwctl server status\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Create a new guest VM instance inside the VirtualBox to be the warewulf client/compute node. Under the system configuration make sure to select the optical and network options only for the boot order. The default iPXE used by VirtualBox does not come with bzImage capability which is needed for warewulf. Download the ipxe.iso available at ipxe.org and mount the ipxe.iso to the optical drive. Enable one Network adapter for this VM and assign it to the NAT Network created in step #1 above. ")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Download ipxe.so available at http://boot.ipxe.org/ipxe.iso\n# VM Settings -> System disable Floppy, Hard Disk from Boot order. Enable Optical and Network options.\n# VM Settings -> Storage and mount the above download ipxe.so to the Optical Drive.\n# VM Settings -> Network Enable adapter #1, attach to 'Nat Network' and choose 'wwnatnetwork' from the drop down list.\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"Boot your node and watch the console and the output of the Warewulfd process")))}p.isMDXComponent=!0}}]);