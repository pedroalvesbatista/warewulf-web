"use strict";(self.webpackChunkwarewulf=self.webpackChunkwarewulf||[]).push([[5790],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),u=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,f=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?i.createElement(f,a(a({ref:t},c),{},{components:n})):i.createElement(f,a({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<o;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6431:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var i=n(7462),r=n(3366),o=(n(7294),n(3905)),a=["components"],s={id:"security",title:"Security"},l=void 0,u={unversionedId:"enchiridion/security",id:"enchiridion/security",isDocsHomePage:!1,title:"Security",description:'Historically, most HPC clusters utilize a security model that is "hard on the exterior and soft and gushy on the interior". It is not that a user has free roam once logged in, but rather we tend to rely on just simple POSIX security models on the inside. For example, one of the common practices is to completely disable SELinux on a new cluster setup. Just kill it because it gets in the way.',source:"@site/docs/enchiridion/security.md",sourceDirName:"enchiridion",slug:"/enchiridion/security",permalink:"/docs/enchiridion/security",editUrl:"https://github.com/hpcng/warewulf-web/edit/main/docs/enchiridion/security.md",tags:[],version:"current",frontMatter:{id:"security",title:"Security"},sidebar:"someSidebar",previous:{title:"IPMI",permalink:"/docs/enchiridion/ipmi"},next:{title:"Templating",permalink:"/docs/enchiridion/templating"}},c=[{value:"SELinux",id:"selinux",children:[]},{value:"Provisioning Security",id:"provisioning-security",children:[]},{value:"Summary",id:"summary",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'Historically, most HPC clusters utilize a security model that is "hard on the exterior and soft and gushy on the interior". It is not that a user has free roam once logged in, but rather we tend to rely on just simple POSIX security models on the inside. For example, one of the common practices is to completely disable SELinux on a new cluster setup. Just kill it because it gets in the way.'),(0,o.kt)("p",null,"For that reason, most critical HPC clusters leverage VPNs and/or bastion hosts with multi-factor authentication (MFA) to help secure it on the outside. But even with MFA and secure ssh connections through a bastion host, it is still possible for malicious users to gain access to these systems. Security being like layers of an onion is accurate, but on an HPC system, those layers are predominately on the outside of the cluster, not the inside."),(0,o.kt)("p",null,"Warewulf was written and designed from the ground up to go a bit further. And while certain parallelization and high performance library capabilities still require lowering the security threshold, Warewulf strives to not be a blocker here."),(0,o.kt)("h2",{id:"selinux"},"SELinux"),(0,o.kt)("p",null,'The Warewulf server itself was developed with SELinux enabled in "targeted" and "enforcing" mode and with the firewall active.'),(0,o.kt)("p",null,"Additionally, the provisioning process fully supports SELinux by default. In previous versions you had to enable a switch to support SELinux, but in Warewulf v4 and above, it is always enabled, but you do have to make some configuration changes."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'The first thing to do is to change the provision "Root" option. By default this is ',(0,o.kt)("inlineCode",{parentName:"p"},"initramfs")," which means, take whatever file system the kernel hands us. By default this is a ",(0,o.kt)("inlineCode",{parentName:"p"},"ramfs")," type file system (however this may not always be the case) and this format does not support extended file attributes which are required for SELinux. Instead you must configure Warewulf to use ",(0,o.kt)("inlineCode",{parentName:"p"},"tmpfs")," for the provisioning file system. That change is made like: ",(0,o.kt)("inlineCode",{parentName:"p"},"$ sudo wwctl profile set --root tmpfs default"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"That is all you have to do to ensure that Warewulf will probably support SELinux. Once that is done, you just need to enable SELinux in ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/sysconfig/selinux")," and install the appropriate profiles into the container."))),(0,o.kt)("h2",{id:"provisioning-security"},"Provisioning Security"),(0,o.kt)("p",null,'Provisioning in generally is known to be rather "insecure" because when a user lands on a compute node, there is generally nothing stopping them from spoofing a provision request and downloading the provisioned raw materials for inspection.'),(0,o.kt)("p",null,"In Warewulf there are two ways to secure the provisioning process:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The provisioning connections and transfers are not secure due to not being able to manage a secure root of trust through a PXE process. The best way to secure the provisioning process is to enact a vLAN used specifically for provisioning. Warewulf supports this but you must consult your switch documentation and features to implement a default vLAN for provisioning and ensure that the runtime operating system is configured for a different tagged vLAN once booted.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"While a vLAN secures the provisioning process, it does not secure the post boot file provisioning via the Runtime Overlay. The default configuration for Warewulf is to only allow requests for the Runtime Overlay through a privileged remote port (e.g. one that only the superuser can open). This is the default configuration for Warewulf and ",(0,o.kt)("inlineCode",{parentName:"p"},"wwclient")," but it can be changed in the ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/warewulf/warewulf.conf")," file under ",(0,o.kt)("inlineCode",{parentName:"p"},"warewulf:secure: true"),")."))),(0,o.kt)("h2",{id:"summary"},"Summary"),(0,o.kt)("p",null,"Warewulf does not limit the security posture of a cluster at all, and perhaps it increases it as not all provisioners work with firewalls and SELinux enabled and enforcing. But even with that, cluster security is always up to the system manager and organizational policies. Our job is just to ensure that we don't limit those policies in any way."))}d.isMDXComponent=!0}}]);